在java中一种更好的单例实现方式:
    有没有一种更好的既实现延迟加载，又能够实现线程安全呢?
使用Lazy initialization holder class模式，这个模式综合使用了java的类级内部类和多线程缺省同步锁的知识，很巧妙地
同时实现了延迟加载和线程安全。

类级内部类指的是，有static修饰的成员式内部类。如果没有static修饰的成员式内部类被称为对象级内部类。
类级内部类相当于外部类的static成分，它的对象与外部类对象间不存在依赖关系，因此可直接创建。而对象级内部类的实例，
是绑定在外部对象实例中的。
类级内部类中，可以定义静态的方法。在静态方法中只能够引用外部类中的静态成员方法或者成员变量。
类级内部类相当于其外部类的成员，只有在第一次被使用的时候才会被装载。

在多线程开发中，为了解决并发问题，主要是通过使用synchronized来加互斥锁进行同步控制。但是在某些情况中，JVM已经隐
含地为您执行了同步，这些情况下就不用自己来进行同步控制了。这些情况包括：
&由静态初始化器（在静态字段上或者static{}块中的初始化器)初始化数据时。
&访问final字段时。
&在创建线程之前创建对象时。
&线程可以看见它将要处理的对象时。